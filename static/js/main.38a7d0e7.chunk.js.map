{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","every","element","handleClick","ReactDOM","render","document","getElementById"],"mappings":"kMAkBA,SAASA,EAAOC,GACZ,OACI,4BACAC,UAAU,SACVC,QAASF,EAAME,SAEVF,EAAMG,OAKnB,SAASC,EAAgBC,GAarB,IAXA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC5BE,EAD4B,KAC1BC,EAD0B,KACxBC,EADwB,KAEnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAClCL,EAAQI,KAAOJ,EAAQM,GACtB,OAAON,EAAQI,GAI3B,OAAO,K,IAGLG,E,qLACOL,GAAI,IAAD,OACZ,OACA,kBAACR,EAAD,CACAI,MAAOU,KAAKb,MAAMK,QAAQE,GAC1BL,QAAW,kBAAM,EAAKF,MAAME,QAAQK,Q,+BAMpC,OACA,6BACI,yBAAKN,UAAU,aACdY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEnB,yBAAKb,UAAU,aACdY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEnB,yBAAKb,UAAU,aACdY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA1BPC,IAAMC,WAkCpBC,E,YACJ,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXC,QAAS,CAAC,CACRd,QAASe,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPM,E,yEAWPhB,GAKV,IAAMY,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAGX,KAAKK,MAAMI,WAAa,GAE9DjB,EADUc,EAAQA,EAAQX,OAAS,GACjBH,QAAQmB,QAC5BpB,EAAgBC,IAAYA,EAAQE,KAIxCF,EAAQE,GAAKM,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKY,SAAS,CACZN,QAASA,EAAQO,OAAO,CAAC,CACvBrB,QAASA,KAEXiB,WAAYH,EAAQX,OACpBe,SAAUV,KAAKK,MAAMK,a,6BAIlBI,GACLd,KAAKY,SAAS,CACZH,WAAYK,EACZJ,QAAUI,EAAO,IAAO,M,+BAKlB,IAmBJC,EAnBG,OACDT,EAAUN,KAAKK,MAAMC,QACrBU,EAAUV,EAAQN,KAAKK,MAAMI,YAC7BQ,EAAS1B,EAAgByB,EAAQxB,SAEjC0B,EAAQZ,EAAQa,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQ/B,QAAS,kBACf,EAAKkC,OAAOH,KACXC,OAeT,OAPIN,EADAE,EACS,WAAaA,EACfD,EAAQxB,QAAQgC,OAAM,SAAAC,GAAO,OAAe,MAAXA,KACjC,eAEA,iBAAmBzB,KAAKK,MAAMK,QAAU,IAAM,KAIzD,yBAAKtB,UAAU,QACX,yBAAKA,UAAU,cACf,kBAACW,EAAD,CACEP,QAASwB,EAAQxB,QACjBH,QAAS,SAACK,GAAD,OAAO,EAAKgC,YAAYhC,OAGnC,yBAAKN,UAAU,aACf,6BAAM2B,GACN,4BAAKG,S,GAhFMhB,IAAMC,WAyFzBwB,IAASC,OACT,kBAACxB,EAAD,MACAyB,SAASC,eAAe,U","file":"static/js/main.38a7d0e7.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// We change this class into a function component as it only contains a render method.\n// class Square extends React.Component {\n//     render() {\n//       return (\n//         <button \n//         className=\"square\" \n//         onClick={() => this.props.onClick()}\n//         >\n//           {this.props.value}\n//         </button>\n//       );\n//     }\n//   }\n\nfunction Square(props) {\n    return (\n        <button \n        className=\"square\"\n        onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    )\n}\n\nfunction calculateWinner(squares) {\n    // all possible victories\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],  \n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a,b,c] = lines[i];\n        if (squares[a] && squares[a] === squares[b]\n            && squares[a] === squares[c]) {\n                return squares[a]\n        }\n    }\n\n    return null;\n}\n  \nclass Board extends React.Component {\nrenderSquare(i) {\n    return (\n    <Square \n    value={this.props.squares[i]}\n    onClick = {() => this.props.onClick(i)} // can call it anything, Square is not a DOM element.\n    />\n    );\n}\n\nrender() {\n    return (\n    <div>\n        <div className=\"board-row\">\n        {this.renderSquare(0)}\n        {this.renderSquare(1)}\n        {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n        {this.renderSquare(3)}\n        {this.renderSquare(4)}\n        {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n        {this.renderSquare(6)}\n        {this.renderSquare(7)}\n        {this.renderSquare(8)}\n        </div>\n    </div>\n    );\n\n}\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    }\n  }\n\n  handleClick(i) {\n    // Avoid mutation because:\n    // 1. complex features become simple.\n    // 2. detecting changes (copy with orig)\n    // 3. determining when to re-render in react.\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // creates a copy of the squares array.\n    if (calculateWinner(squares) || squares[i]) {\n      // return if already winner or square is filled.\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \n        'Go to move #' + move : \n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() =>\n            this.jumpTo(move)\n          }>{desc}</button>\n        </li>\n      )\n    })\n\n\n    let status;\n    if (winner) {\n        status = \"Winner: \" + winner;\n    } else if (current.squares.every(element => element != null)) {\n      status = \"It's a Draw!\"\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n    <div className=\"game\">\n        <div className=\"game-board\">\n        <Board\n          squares={current.squares}\n          onClick={(i) => this.handleClick(i)}\n        />\n        </div>\n        <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n        </div>\n    </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n<Game />,\ndocument.getElementById('root')\n);\n  "],"sourceRoot":""}